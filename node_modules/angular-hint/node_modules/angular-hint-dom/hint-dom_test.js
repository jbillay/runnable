var hintLog = angular.hint;
describe('ngHintDom', function() {

  var $controller, $rootScope;

  beforeEach(module('ngHintDom'));
  beforeEach(module(function(_$controllerProvider_) {
    $controllerProvider = _$controllerProvider_;
  }));
  beforeEach(inject(function(_$controller_, _$rootScope_) {
    $controller = _$controller_;
    $rootScope = _$rootScope_;
    hintLog.logMessage = jasmine.createSpy('logMessage');
  }));

  describe('controller decorating', function() {
    it('should maintain normal controller logic', function() {
      var controllerMock = function() {
        var element = document.createElement('a');
        element.innerHTML = 'testValue';
      };
      var ctrl = $controller(controllerMock);
      expect(ctrl).toBeDefined();
    });


    it('should call logic to patch prototypes', function() {
      expect(hintLog.logMessage).not.toHaveBeenCalled();
      var controllerMock = function() {
        var element = document.createElement('a');
        element.getAttribute('NamedNodeMap');
      };
      var ctrl = $controller(controllerMock);
      expect(hintLog.logMessage.callCount).toBe(2);
    });


    it('should call logic to patch created elements', function() {
      expect(hintLog.logMessage).not.toHaveBeenCalled();
      var controllerMock = function() {
        var element = document.createElement('a');
      };
      var ctrl = $controller(controllerMock);
      expect(hintLog.logMessage).toHaveBeenCalled();
    });


    it('should unpatch prototypes after execution', function() {
      //Should cause calls to the listener for manipulation
      var controllerMock = function() {
        var element = document.createElement('a');
      };
      var ctrl = $controller(controllerMock);
      //Should not cause calls to the listener because of unpatching
      var elem = document.createElement('div');
      expect(hintLog.logMessage.callCount).toBe(1);
    });


    it('should patch methods on the controller instance', function() {
      expect(hintLog.logMessage).not.toHaveBeenCalled();
      var controllerMock = function() {
        this.someMethod = function () {
          var element = document.createElement('a');
          element.innerHTML = 'testValue';
        };
      };
      var ctrl = $controller(controllerMock);
      ctrl.someMethod();
      expect(hintLog.logMessage).toHaveBeenCalled();
    });


    it('should patch methods on the $scope that is injected into the controller instance',
      inject(function($rootScope) {
        thisScope = $rootScope.$new();
        angular.module('SampleApp', []).controller('SampleController', function($scope) {
            $scope.testFunction = function() {
              document.createElement('div');
            };
        });
        var ctrl = $controller('SampleController', {$scope: thisScope});
        thisScope.testFunction();
        expect(hintLog.logMessage).toHaveBeenCalled();
    }));


    it('should get controllers to patch if passed their name', function() {
      angular.module('SampleApp', []).controller('SampleController', function() {});
      expect(function() {
        var ctrl = $controller('SampleController');
      }).not.toThrow();
    });
  });

  describe('asynchronous decorating', function() {
    it('should handle asynchronous DOM manipulations', inject(function($rootScope, $timeout) {
      var MockController = function($timeout) {
        $timeout(function() {
          var element = document.createElement('a');
          timeoutCompleted = true;
        }, 0);
      };
      var ctrl = $controller(MockController);
      $timeout.flush();
      expect(hintLog.logMessage).toHaveBeenCalled();
    }));


    it('should detect both synchronous and asynchronous calls in the same controller',
      inject(function($rootScope, $timeout) {
        var MockController = function($timeout) {
          var element = document.createElement('a');
          $timeout(function() {
            var element = document.createElement('a');
            timeoutCompleted = true;
          }, 0);
        };
        var ctrl = $controller(MockController);
        $timeout.flush();
        expect(hintLog.logMessage).toHaveBeenCalled();
    }));
  });
});
